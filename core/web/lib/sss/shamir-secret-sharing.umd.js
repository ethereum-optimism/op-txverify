!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).ShamirSecretSharing={})}(this,(function(e){"use strict";function t(e){return crypto.getRandomValues(new Uint8Array(e))}const n=new Uint8Array([0,255,200,8,145,16,208,54,90,62,216,67,153,119,254,24,35,32,7,112,161,108,12,127,98,139,64,70,199,75,224,14,235,22,232,173,207,205,57,83,106,39,53,147,212,78,72,195,43,121,84,40,9,120,15,33,144,135,20,42,169,156,214,116,180,124,222,237,177,134,118,164,152,226,150,143,2,50,28,193,51,238,239,129,253,48,92,19,157,41,23,196,17,68,140,128,243,115,66,30,29,181,240,18,209,91,65,162,215,44,233,213,89,203,80,168,220,252,242,86,114,166,101,47,159,155,61,186,125,194,69,130,167,87,182,163,122,117,79,174,63,55,109,71,97,190,171,211,95,176,88,175,202,94,250,133,228,77,138,5,251,96,183,123,184,38,74,103,198,26,248,105,37,179,219,189,102,221,241,210,223,3,141,52,217,146,13,99,85,170,73,236,188,149,60,132,11,245,230,231,229,172,126,110,185,249,218,142,154,201,36,225,10,21,107,58,160,81,244,234,178,151,158,93,34,136,148,206,25,1,113,76,165,227,197,49,187,204,31,45,59,82,111,246,46,137,247,192,104,27,100,4,6,191,131,56]),r=new Uint8Array([1,229,76,181,251,159,252,18,3,52,212,196,22,186,31,54,5,92,103,87,58,213,33,90,15,228,169,249,78,100,99,238,17,55,224,16,210,172,165,41,51,89,59,48,109,239,244,123,85,235,77,80,183,42,7,141,255,38,215,240,194,126,9,140,26,106,98,11,93,130,27,143,46,190,166,29,231,157,45,138,114,217,241,39,50,188,119,133,150,112,8,105,86,223,153,148,161,144,24,187,250,122,176,167,248,171,40,214,21,142,203,242,19,230,120,97,63,137,70,13,53,49,136,163,65,128,202,23,95,83,131,254,195,155,69,57,225,245,158,25,94,182,207,75,56,4,185,43,226,193,74,221,72,12,208,125,61,88,222,124,216,20,107,135,71,232,121,132,115,60,189,146,201,35,139,151,149,68,220,173,64,101,134,162,164,204,127,236,192,175,145,253,247,79,129,47,91,234,168,28,2,209,152,113,237,37,227,36,6,104,179,147,44,111,62,108,10,184,206,174,116,177,66,180,30,211,73,233,156,200,198,199,34,110,219,32,191,67,81,82,102,178,118,96,218,197,243,246,170,205,154,160,117,84,14,1]);function o(e,t){if(!Number.isInteger(e)||e<0||e>255)throw new RangeError("Number is out of Uint8 range");if(!Number.isInteger(t)||t<0||t>255)throw new RangeError("Number is out of Uint8 range");return e^t}function a(e,t){if(!Number.isInteger(e)||e<0||e>255)throw new RangeError("Number is out of Uint8 range");if(!Number.isInteger(t)||t<0||t>255)throw new RangeError("Number is out of Uint8 range");if(0===t)throw new Error("cannot divide by zero");const o=n[e],a=n[t],s=r[(o-a+255)%255];return 0===e?0:s}function s(e,t){if(!Number.isInteger(e)||e<0||e>255)throw new RangeError("Number is out of Uint8 range");if(!Number.isInteger(t)||t<0||t>255)throw new RangeError("Number is out of Uint8 range");const o=n[e],a=n[t],s=r[(o+a)%255];return 0===e||0===t?0:s}function i(e,t,n){if(e.length!==t.length)throw new Error("sample length mistmatch");const r=e.length;let i=0,u=0;for(let f=0;f<r;f++){i=1;for(let t=0;t<r;++t){if(f===t)continue;i=s(i,a(o(n,e[t]),o(e[f],e[t])))}u=o(u,s(t[f],i))}return u}function u(e,t,n){if(0===t)throw new Error("cannot evaluate secret polynomial at zero");let r=e[n];for(let a=n-1;a>=0;a--){const n=e[a];r=o(s(r,t),n)}return r}function f(e,n){const r=new Uint8Array(n+1);return r[0]=e,r.set(t(n),1),r}const c={instanceOf(e,t,n){if(e.constructor!==t)throw new TypeError(n)},inRange(e,t,n,r){if(!(t<n&&e>=t&&e<n))throw new RangeError(r)},greaterThanOrEqualTo(e,t,n){if(e<t)throw new Error(n)},equalTo(e,t,n){if(e!==t)throw new Error(n)}};e.combine=async function(e){c.instanceOf(e,Array,"shares must be an Array"),c.inRange(e.length,2,256,"shares must have at least 2 and at most 255 elements");const t=e[0];c.instanceOf(t,Uint8Array,"each share must be a Uint8Array");for(const n of e)c.instanceOf(n,Uint8Array,"each share must be a Uint8Array"),c.greaterThanOrEqualTo(n.byteLength,2,"each share must be at least 2 bytes"),c.equalTo(n.byteLength,t.byteLength,"all shares must have the same byte length");const n=e.length,r=t.byteLength,o=r-1,a=new Uint8Array(o),s=new Uint8Array(n),u=new Uint8Array(n),f=new Set;for(let t=0;t<n;t++){const n=e[t][r-1];if(f.has(n))throw new Error("shares must contain unique values but a duplicate was found");f.add(n),s[t]=n}for(let t=0;t<o;t++){for(let r=0;r<n;++r)u[r]=e[r][t];a[t]=i(s,u,0)}return a},e.split=async function(e,n,r){c.instanceOf(e,Uint8Array,"secret must be a Uint8Array"),c.greaterThanOrEqualTo(e.byteLength,1,"secret cannot be empty"),c.instanceOf(n,Number,"shares must be a number"),c.inRange(n,2,256,"shares must be at least 2 and at most 255"),c.instanceOf(r,Number,"threshold must be a number"),c.inRange(r,2,256,"threshold must be at least 2 and at most 255"),c.greaterThanOrEqualTo(n,r,"shares cannot be less than threshold");const o=[],a=e.byteLength,s=function(){const e=new Uint8Array(255);for(let t=0;t<255;t++)e[t]=t+1;const n=t(255);for(let t=0;t<255;t++){const r=n[t]%255,o=e[t];e[t]=e[r],e[r]=o}return e}();for(let e=0;e<n;e++){const t=new Uint8Array(a+1);t[a]=s[e],o.push(t)}const i=r-1;for(let t=0;t<a;t++){const r=f(e[t],i);for(let e=0;e<n;++e){const n=u(r,s[e],i);o[e][t]=n}}return o},Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=shamir-secret-sharing.umd.js.map
